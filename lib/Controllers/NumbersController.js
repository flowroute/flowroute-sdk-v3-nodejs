/**
 * FlowrouteNumbersAndMessagingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class NumbersController {
    /**
     * Returns a list of all phone numbers currently on your Flowroute account. The response
     * includes details such as the phone number's rate center, state, number type, and whether
     * CNAM Lookup is enabled for that number.
     *
     * @param {int} startsWith (optional) Retrieves phone numbers that start with the specified
     * value.
     * @param {int} endsWith (optional) Retrieves phone numbers that end with the specified value.
     * @param {int} contains (optional) Retrieves phone numbers containing the specified value.
     * @param {int} limit (optional) Limits the number of items to retrieve. A maximum of 200 items
     * can be retrieved.
     * @param {int} offset (optional) Offsets the list of phone numbers by your specified value.
     * For example, if you have 4 phone numbers and you entered 1 as your
     * offset value, then only 3 of your phone numbers will be displayed in the
     * response.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getAccountPhoneNumbers(startsWith, endsWith, contains, limit, offset, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/v2/numbers'}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            starts_with: startsWith,
            ends_with: endsWith,
            contains,
            limit,
            offset,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'Flowroute SDK v3.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.username,
            password: _configuration.password,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    const parsed = JSON.parse(_response.body);
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Unauthorized – There was an issue with your API credentials.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const _err = { errorMessage: 'The specified resource was not found',
                        errorCode: 404,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Lists all of the information associated with any of the phone numbers in your account,
     * including billing method, primary voice route, and failover voice route.
     *
     * @param {int} id Phone number to search for which must be a number that you own. Must be in
     * 11-digit E.164 format; e.g. 12061231234.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getPhoneNumberDetails(id, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/v2/numbers/{id}'}`;

        // process template parameters
        _queryBuilder = _apiHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            id,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'Flowroute SDK v3.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.username,
            password: _configuration.password,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'PhoneNumber');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Unauthorized', errorCode: 401, errorResponse: _response.body };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const _err = { errorMessage: 'Not Found', errorCode: 404, errorResponse: _response.body };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Lets you purchase a phone number from available Flowroute inventory.
     *
     * @param {int} id Phone number to purchase. Must be in 11-digit E.164 format; e.g. 12061231234.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createPurchaseAPhoneNumber(id, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/v2/numbers/{id}'}`;

        // process template parameters
        _queryBuilder = _apiHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            id,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'Flowroute SDK v3.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            username: _configuration.username,
            password: _configuration.password,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'PhoneNumber');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Unauthorized – There was an issue with your API credentials.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const _err = { errorMessage: 'The specified resource was not found',
                        errorCode: 404,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Returns a list of all Numbering Plan Area (NPA) codes containing purchasable phone numbers.
     *
     * @param {int} limit (optional) Limits the number of items to retrieve. A maximum of 400 items
     * can be retrieved.
     * @param {int} offset (optional) Offsets the list of phone numbers by your specified value.
     * For example, if you have 4 phone numbers and you entered 1 as your
     * offset value, then only 3 of your phone numbers will be displayed in the
     * response.
     * @param {double} maxSetupCost (optional) Restricts the results to the specified maximum non-
     * recurring setup cost.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static listAvailableAreaCodes(limit, offset, maxSetupCost, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/v2/numbers/available/areacodes'}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            limit,
            offset,
            max_setup_cost: maxSetupCost,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'Flowroute SDK v3.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.username,
            password: _configuration.password,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    const parsed = JSON.parse(_response.body);
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Unauthorized – There was an issue with your API credentials.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const _err = { errorMessage: 'The specified resource was not found',
                        errorCode: 404,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Returns a list of all Central Office (exchange) codes containing purchasable phone numbers.
     *
     * @param {int} limit (optional) Limits the number of items to retrieve. A maximum of 200 items
     * can be retrieved.
     * @param {int} offset (optional) Offsets the list of phone numbers by your specified value.
     * For example, if you have 4 phone numbers and you entered 1 as your
     * offset value, then only 3 of your phone numbers will be displayed in the
     * response.
     * @param {double} maxSetupCost (optional) Restricts the results to the specified maximum non-
     * recurring setup cost.
     * @param {int} areacode (optional) Restricts the results to the specified area code.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static listAvailableExchangeCodes(limit, offset, maxSetupCost, areacode, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/v2/numbers/available/exchanges'}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            limit,
            offset,
            max_setup_cost: maxSetupCost,
            areacode,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'Flowroute SDK v3.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.username,
            password: _configuration.password,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    const parsed = JSON.parse(_response.body);
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Unauthorized – There was an issue with your API credentials.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const _err = { errorMessage: 'The specified resource was not found',
                        errorCode: 404,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * This endpoint lets you search for phone numbers by state or rate center, or by your
     * specified search value.
     *
     * @param {int} startsWith (optional) Retrieve phone numbers that start with the specified
     * value.
     * @param {int} contains (optional) Retrieve phone numbers containing the specified value.
     * @param {int} endsWith (optional) Retrieve phone numbers that end with the specified value.
     * @param {int} limit (optional) Limits the number of items to retrieve. A maximum of 200 items
     * can be retrieved.
     * @param {int} offset (optional) Offsets the list of phone numbers by your specified value.
     * For example, if you have 4 phone numbers and you entered 1 as your
     * offset value, then only 3 of your phone numbers will be displayed in the
     * response.
     * @param {string} rateCenter (optional) Filters by and displays phone numbers in the specified
     * rate center.
     * @param {string} state (optional) Filters by and displays phone numbers in the specified
     * state. Optional unless a ratecenter is specified.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static searchForPurchasablePhoneNumbers(startsWith,
        contains,
        endsWith,
        limit,
        offset,
        rateCenter,
        state,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/v2/numbers/available'}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            starts_with: startsWith,
            contains,
            ends_with: endsWith,
            limit,
            offset,
            rate_center: rateCenter,
            state,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'Flowroute SDK v3.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.username,
            password: _configuration.password,
        };
        console.log("options", _options)
        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    const parsed = JSON.parse(_response.body);
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Unauthorized – There was an issue with your API credentials.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const _err = { errorMessage: 'The specified resource was not found',
                        errorCode: 404,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = NumbersController;
